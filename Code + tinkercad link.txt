#include <Servo.h>
#include <LiquidCrystal.h>
#include <Keypad.h>

const byte ROWS = 4; 
const byte COLS = 4; 
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {A0, A1, A2, A3}; 
byte colPins[COLS] = {11, 10, 9, 8}; 

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

LiquidCrystal lcd(7, 6, 5, 4, 3, 2);

Servo servo_X;
Servo servo_Y;

int mode;
int L1=30; //length of the first arm
int L2=15; //length of the second arm
int ang=50;
float ang1,ang2,m;
float x,y,q1,q2;
char key;

int g1=0,g2=0,h1=0,h2=0;
int u1=0,u2=0,r1=0,r2=0;

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
void setup() {
 
  servo_X.attach(0);
  servo_Y.attach(1);
  servo_X.write(0);
  servo_Y.write(0);
  
  lcd.begin(16, 2);

  	lcd.setCursor(0, 0);
    lcd.print("     ROBOTIC     ");
    lcd.setCursor(0, 1);
    lcd.print("       ARM       "); // Welcome display
  delay(3000);
  
  
  
}
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

void loop() { 
    
  
  /*
  the user will be given a choice between forward kinematics
  and inverse kinematic 
  */
  
  lcd.setCursor(0, 0);
   lcd.print("1: Forward Mode");
  lcd.setCursor(0, 1);
    lcd.print("2: Inverse Mode"); 
  
  key=keypad.getKey();
  
  if(key != NO_KEY){
    lcd.clear();
    lcd.setCursor(0,0);
  
  switch (key){
    
    /*
    if the user chose forward kinematics they will be asked to 
    enter the value of the two angles
    */
    
    case '1':
    lcd.print(key);
    delay(1000);
    lcd.clear();
    lcd.print("Forward Mode");
    delay(1500);
    
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Enter 1st angle");
    while (g1==0){g1=keypad.getKey();}
    lcd.setCursor(0, 1);
    g1=g1-48;
    lcd.print(g1);
    while (g2==0){g2=keypad.getKey();}
    g2=g2-48;
    lcd.print(g2);
    delay(500);
    q1=g1*10+g2;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Enter 2nd angle");
    while (h1==0){h1=keypad.getKey();}
    h1=h1-48;    
	lcd.setCursor(0, 1);
    lcd.print(h1);
    while (h2==0){h2=keypad.getKey();}
    h2=h2-48;
    lcd.print(h2);
    delay(500);
    q2=h1*10+h2;
    forward();
    
    break;
    
    /*
    if the user chose inverse kinematics they will be asked to 
    enter the value of X and Y
    */
    
    case '2':
    lcd.print(key);
    delay(1000);
    lcd.clear();
    lcd.print("Inverse Mode");
    delay(1500);
    
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Enter X value");
    while (u1==0){u1=keypad.getKey();}
    u1=u1-48;
    lcd.setCursor(0, 1);
    lcd.print(u1);
    while (u2==0){u2=keypad.getKey();}
    u2=u2-48;
    lcd.print(u2);
    delay(500);
    x=u1*10+u2;
    lcd.clear();
    lcd.print("Enter Y value");
    while (r1==0){r1=keypad.getKey();}
    r1=r1-48;
    lcd.setCursor(0, 1);
    lcd.print(r1);
    while (r2==0){r2=keypad.getKey();}
    r2=r2-48;
    lcd.print(r2);
    delay(500);
    y=r1*10+r2;
    inverse();
    
    break;
  
    /*
    if the user enters other number other than 1 and 2
    they will be asked to try again
    */
    
    default:
    lcd.print(key);
    delay(1000);
    lcd.clear();
    lcd.setCursor(4, 0);
   	lcd.print("Invalid");
   	lcd.setCursor(3, 1);
   	lcd.print("Try Again");
    delay(1500);
    lcd.clear();
    break;
  
  }}} 

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	/*
    The forward function will calculate the position of the end factor
    in the X-Y plane
	*/

void forward(){

    servo_X.write(q1);
    servo_Y.write(q2);
  
        lcd.clear();
        ang1=q1*PI/180;
        ang2=q2*PI/180;
        x=(L1*cos(ang1))+(L2*cos(ang1+ang2));
    	y=(L1*sin(ang1))+(L2*sin(ang1+ang2));
        lcd.setCursor(0, 0);
   		  lcd.print("End Point:");
   		lcd.setCursor(0, 1);
   		  lcd.print("X=");
          lcd.print(x );
        lcd.setCursor(9, 1);
          lcd.print("Y=");
   		  lcd.print(y);
        delay(10000);
      }

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	/*
    The inverse function will calculate the angles which leads
    the end factor to be at a specified point
    */

void inverse(){
  
  lcd.clear();
  
  	m=(pow(x,2)+pow(y,2)-pow(L1,2)-pow(L2,2))/(2*L1*L2);
  	q2=1/cos(m);
  	ang2=q2*180/PI;
  	ang1=ang-ang2;
  
  	lcd.setCursor(3, 0);
   	 lcd.print("Angles...");
  delay(1000);
  lcd.clear();
   		 lcd.setCursor(0, 0);
   		   lcd.print("Q1=");
           lcd.print(ang1);
         lcd.setCursor(0, 1);
           lcd.print("Q2=");
   		   lcd.print(ang2);
  
    servo_X.write(ang1);
    servo_Y.write(ang2);
  
        delay(10000);

      }

//https://www.tinkercad.com/things/4AJJ4xA9hsy